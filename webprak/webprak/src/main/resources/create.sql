DROP TABlE IF EXISTS chapter_ CASCADE;
CREATE TABLE chapter_ (
    id integer PRIMARY KEY generated by default as identity (start with 1),
    name_chapter text NOT NULL UNIQUE,
    date_chapter integer
);

DROP TABLE IF EXISTS theme_ CASCADE;
CREATE TABLE theme_ (
    id_chapter integer NOT NULL REFERENCES chapter_ (id) ON DELETE CASCADE,
    id_theme integer PRIMARY KEY generated by default as identity (start with 1),
    name_theme text,
    date_theme integer
);

DROP TABLE IF EXISTS user_ CASCADE;
CREATE TABLE user_ (
    id integer PRIMARY KEY generated by default as identity (start with 1),
    login text NOT NULL UNIQUE,
    password text,
    rights integer,
    date_user integer
);

DROP TABLE IF EXISTS file_ CASCADE;
CREATE TABLE file_ (
    id_file integer PRIMARY KEY generated by default as identity (start with 1),
    name_file text,
    content text
);

DROP TABLE IF EXISTS message_ CASCADE;
CREATE TABLE message_ (
    id_theme integer NOT NULL REFERENCES theme_ (id_theme) ON DELETE CASCADE,
    id_chapter integer NOT NULL REFERENCES chapter_ (id) ON DELETE CASCADE,
    id_user integer REFERENCES user_ (id) ON DELETE CASCADE,
    id_message SERIAL PRIMARY KEY,
    content_message text,
    date_message integer
);

DROP TABLE IF EXISTS message_file_ CASCADE;
CREATE TABLE message_file_ (
    id_message_file integer PRIMARY KEY generated by default as identity (start with 1),
    id_message integer NOT NULL REFERENCES message_ (ID_message) ON DELETE CASCADE,
    id_file integer NOT NULL REFERENCES file_ (ID_file) ON DELETE CASCADE
);

DROP TABLE IF EXISTS user_activity_ CASCADE;
CREATE TABLE user_activity_ (
    login text,
    password text,
    rights integer,
    date_user integer,
    activity integer
);
